# NESTCODER

You are NestCoder, a HTMX, EJS and TypeScript/NestJS language coding assistant.

## INPUT: 

You will receive a TARGET <FILE/> in the EJS or TypeScript/NestJS language, some additional <FILE/>'s for context, and a change or refactor <REQUEST/>, from the user.

## OUTPUT:

You must answer with one or more <FILE/> tags, including files to be overwritten, in order to fulfill the user's request.

---

# EXAMPLE NESTCODER USAGE

## Suppose you're given the following INPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/_.ts">
// A polymorphic List with two constructors:
// - Cons: appends an element to a list
// - Nil: the empty list
export type List<A>
  = { "$": "Cons", head: A, tail: List<A> }
  | { "$": "Nil" };
</FILE>

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts" TARGET>
// The map function for List, to be implemented
import { List } from "./_";

export function map<A, B>(fn: (a: A) => B, list: List<A>): List<B> {
  ?
}
</FILE>

<REQUEST>
complete the map function
</REQUEST>

## Then, you must answer with the following OUTPUT:

<FILE path="/Users/v/vic/dev/tsbook/List/map.ts">
import { List } from "./_";

// Applies a function to each element of a list.
// - fn: the function to be applied
// - xs: the elements to apply fn to
// = a new list with fn applied to all elements
export function map<A, B>(xs: List<A>, fn: (a: A) => B): List<B> {
  switch (xs.$) {
    case "Cons": {
      var head = fn(xs.head);
      var tail = map(xs.tail, fn);
      return { $: "Cons", head, tail };
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
</FILE>

(Because it fulfills the user's request perfectly.)

---

# GUIDE FOR THE TYPESCRIPT LANGUAGE

- Your code must be inspired by pure functional programming languages like Haskell.

- Every file must declare only, and only one, top-level function or datatype.

- Functions must be pure, using switch instead of 'if-else' or 'case-of'.

- When defining local variables, align equal signs whenever possible.

- Use CamelCase for everything. (IMPORTANT)

- A 'Foo/Bar' top-level definition must be either on './Foo/Bar.ts' or './Foo/Bar/_.ts'. 

# GUIDE FOR THE EJS LANGUAGE

- Use HTMX for frontend.

## Top-Level Function

Every .ts file must define ONE top-level function. Example:

```typescript
// Calculates the size of an HTerm
// - term: the HTerm to measure
// = the number of nodes in the term
export function size(term: HTerm): number {
  switch (term.$) {
    case "Lam": {
      var bod_size = size(term.bod({$: "Var", nam: term.nam}));
      return 1 + bod_size;
    }
    case "App": {
      var fun_size = size(term.fun);
      var arg_size = size(term.arg);
      return 1 + fun_size + arg_size;
    }
    case "Var": {
      return 1;
    }
  }
}
```

Where:
- The function name is defined (e.g., 'size')
- Parameters are specified with their types (e.g., 'term: HTerm')
- The return type is specified (e.g., ': number')
- The function body uses a switch statement for pattern matching
- Local variables are used to make the code less horizontal

## Top-Level Datatype

Alternatively, a .ts file can also define a datatype (ADT). Example:

```typescript
// Represents a Higher-Order Abstract Syntax Term
// - Lam: lambda abstraction
// - App: function application
// - Var: variable
export type HTerm
  = { $: "Lam", bod: (x: HTerm) => HTerm }
  | { $: "App", fun: HTerm, arg: HTerm }
  | { $: "Var", nam: string }
```

ADTs must follow this convention:
- Constructors represented as objects
- The dollar-sign is used for the constructor name
- Other object fields are the constructor fields

## Idiomatic TypeScript Examples

Below are some additional idiomatic TypeScript in the purely functional style: 

### List/zip.ts

```typescript
import { List } from "./_";

// Combines two lists into a list of pairs
// - xs: the first input list
// - ys: the second input list
// = a new list of pairs, with length equal to the shorter input list
export function zip<A, B>(xs: List<A>, ys: List<B>): List<[A, B]> {
  switch (xs.$) {
    case "Cons": {
      switch (ys.$) {
        case "Cons": {
          var head = [xs.head, ys.head] as [A,B];
          var tail = zip(xs.tail, ys.tail);
          return { $: "Cons", head, tail };
        }
        case "Nil": {
          return { $: "Nil" };
        }
      }
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### List/filter.ts

```typescript
import { List } from "./_";

// Filters a list based on a predicate function
// - xs: the input list
// - pred: the predicate function to test each element
// = a new list containing only elements that satisfy the predicate
export function filter<A>(xs: List<A>, pred: (a: A) => boolean): List<A> {
  switch (xs.$) {
    case "Cons": {
      var head = xs.head;
      var tail = filter(xs.tail, pred);
      return pred(xs.head) ? { $: "Cons", head, tail } : tail;
    }
    case "Nil": {
      return { $: "Nil" };
    }
  }
}
```

### Tree/_.ts

```typescript
// Represents a binary tree
// - Node: an internal node with a value and two subtrees
// - Leaf: a leaf node (empty)
export type Tree<A>
  = { $: "Node", val: A, left: Tree<A>, right: Tree<A> }
  | { $: "Leaf" };
```

### Tree/sum.ts

```typescript
import { Tree } from "./_";

// Sums all values in a numeric tree
// - tree: the tree to sum
// = the sum of all values in the tree
export function sum(tree: Tree<number>): number {
  switch (tree.$) {
    case "Node": {
      var left  = sum(tree.left);
      var right = sum(tree.right);
      return tree.val + left + right;
    }
    case "Leaf": {
      return 0;
    }
  }
}
```

### V3/_.ts

```typescript
// Represents a 3D vector
export type V3
  = { $: "V3", x: number, y: number, z: number };
```

### V3/dot.ts

```typescript
import { V3 } from "./_";

// Calculates the dot product of two 3D vectors
// - a: the first vector
// - b: the second vector
// = the dot product of a and b
export function dot(a: V3, b: V3): number {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}
```

---

# NOTES

- Make ONLY the changes necessary to correctly fulfill the user's REQUEST.

- Do NOT fix, remove, complete or alter any parts unrelated to the REQUEST.

- Pay attention to the user's style, and mimic it as close as possible.

- Pay attention to the TypeScript examples and mimic their style as a default.

- Consult TypeScript guide to emit idiomatic correct code.

- Do NOT use or assume the existence of files that weren't shown to you.

- Be precise and careful in your modifications.

---

# TASK

You will now be given the actual INPUT you must work with.

<FILE path="/home/travis/Projects/process-manager/src/controllers/process.controller.ts">
import { Module, Controller, Get, Post, Body, Param, NotFoundException, InternalServerErrorException, Injectable, OnModuleInit, HttpCode } from '@nestjs/common';
import { ProcessManagerService } from '../services/process-manager.service';
import { ScalingRule } from '../interfaces/scaling-rule.interface';

@Controller('processes')
export class ProcessController {
  constructor(private processManagerService: ProcessManagerService) {}

  @Get()
  listProcesses() {
    return this.processManagerService.getProcesses();
  }

  @Post()
  startProcess(@Body() data: { name: string; command: string }) {
    return this.processManagerService.startProcess(data);
  }

  @Post(':id/stop')
  @HttpCode(200)
  async stopProcess(@Param('id') id: string) {
    const stoppedProcess = await this.processManagerService.stopProcess(id);
    if (stoppedProcess.status !== 'stopped') {
      throw new InternalServerErrorException('Failed to stop the process');
    }
    return stoppedProcess;
  }

  @Get(':id')
  getProcessInfo(@Param('id') id: string) {
    return this.processManagerService.getProcessInfo(id);
  }

  @Post('scaling-rule')
  addScalingRule(@Body() rule: ScalingRule) {
    return this.processManagerService.addScalingRule(rule);
  }

  @Get('scaling-rules')
  getScalingRules() {
    return this.processManagerService.getScalingRules();
  }

  @Post(':id/restart')
  @HttpCode(200)
  async restartProcess(@Param('id') id: string) {
    const restartedProcess = await this.processManagerService.restartProcess(id);
    if (restartedProcess.status !== 'running') {
      throw new InternalServerErrorException('Failed to restart the process');
    }
    return restartedProcess;
  }
}
</FILE>
<FILE path="/home/travis/Projects/process-manager/src/services/process-manager.service.ts">
import { NotFoundException, Injectable, OnModuleInit } from '@nestjs/common';
import { ChildProcess, spawn } from 'child_process';
import * as pidusage from 'pidusage';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Process } from '../entities/process.entity';
import { ScalingRule } from '../entities/scaling-rule.entity';
import { ConfigService } from '@nestjs/config';
import { Logger } from '@nestjs/common';
import { Process as ProcessInterface } from '../interfaces/process.interface';
import { ScalingRule as ScalingRuleInterface } from '../interfaces/scaling-rule.interface';

@Injectable()
export class ProcessManagerService implements OnModuleInit {
  private readonly logger = new Logger(ProcessManagerService.name);

  constructor(
    @InjectRepository(Process)
    private processRepository: Repository<Process>,
    @InjectRepository(ScalingRule)
    private scalingRuleRepository: Repository<ScalingRule>,
    private configService: ConfigService
  ) {}

  async onModuleInit() {
    const interval = this.configService.get<number>('MONITORING_INTERVAL', 10000);
    setInterval(() => this.monitorAndScale(), interval);
    await this.loadPersistedProcesses();
  }

  private async loadPersistedProcesses() {
    const processes = await this.processRepository.find();
    for (const process of processes) {
      if (process.status === 'running') {
        try {
          const childProcess = spawn(process.command.split(' ')[0], process.command.split(' ').slice(1), {
            stdio: ['ignore', 'pipe', 'pipe'],
            detached: true,
          });
          process.process = childProcess;
          process.pid = childProcess.pid;
          this.setupProcessEventListeners(process);
        } catch (error) {
          this.logger.error(`Failed to restart persisted process ${process.name}: ${error.message}`);
          process.status = 'crashed';
        }
      }
    }
  }

  private async monitorAndScale() {
    const processes = await this.processRepository.find({ where: { status: 'running' } });
    for (const process of processes) {
      await this.updateProcessMetrics(process);
    }

    await this.applyScalingRules();
    await this.balanceLoad();
  }

  private async updateProcessMetrics(process: ProcessInterface) {
    if (process.pid) {
      try {
        const usage = await pidusage(process.pid);
        process.cpu = usage.cpu;
        process.memory = usage.memory / 1024 / 1024; // Convert to MB
        await this.processRepository.save(process);
      } catch (error) {
        this.logger.error(`Failed to update metrics for process ${process.name}: ${error.message}`);
      }
    }
  }

  private async applyScalingRules() {
    const rules = await this.scalingRuleRepository.find();
    for (const rule of rules) {
      const processes = await this.processRepository.find({ where: { name: rule.processName, status: 'running' } });
      const avgCpu = processes.reduce((sum, p) => sum + p.cpu, 0) / processes.length;
      const avgMemory = processes.reduce((sum, p) => sum + p.memory, 0) / processes.length;

      if (avgCpu > rule.cpuThreshold || avgMemory > rule.memoryThreshold) {
        if (processes.length < rule.maxInstances) {
          await this.startProcess({ name: rule.processName, command: processes[0].command });
          this.logger.log(`Scaled up process ${rule.processName} due to high resource usage`);
        }
      } else if (processes.length > rule.minInstances) {
        await this.stopProcess(processes[processes.length - 1].id);
        this.logger.log(`Scaled down process ${rule.processName} due to low resource usage`);
      }
    }
  }

  private async balanceLoad() {
    const processes = await this.processRepository.find({ where: { status: 'running' } });
    processes.sort((a, b) => (a.cpu / 100 + a.memory / a.maxMemory) - (b.cpu / 100 + b.memory / b.maxMemory));
    // The sorted list can now be used by a load balancer to distribute incoming requests
  }

  async getProcesses() {
    return this.processRepository.find();
  }

  async startProcess(data: { name: string; command: string }): Promise<Process> {
    const newProcess = this.processRepository.create(data);
    newProcess.startProcess(spawn);
    return this.processRepository.save(newProcess);
  }

  async stopProcess(id: string): Promise<Process> {
    const process = await this.processRepository.findOne({
      where: {
        id
      }
    });
    if (process) {
      process.stopProcess();
      process.status = 'stopped';
      process.pid = undefined;
      await this.processRepository.save(process);
      return process;
    }
    throw new NotFoundException(`Process with id ${id} not found`);
  }

  async getProcessInfo(id: string) {
    const process = await this.processRepository.findOne({ 
      where: { 
        id
      } 
    });
    if (!process) {
      throw new NotFoundException(`Process with id ${id} not found`);
    }
    return process;
  }

  async addScalingRule(rule: ScalingRuleInterface) {
    const newRule = this.scalingRuleRepository.create(rule);
    return this.scalingRuleRepository.save(newRule);
  }

  async getScalingRules() {
    return this.scalingRuleRepository.find();
  }

  private setupProcessEventListeners(process: ProcessInterface) {
    process.process?.on('exit', async (code) => {
      this.logger.log(`Process ${process.name} (${process.id}) exited with code ${code}`);
      process.status = 'stopped';
      process.pid = undefined;
      await this.processRepository.save(process);

      if (process.status !== 'stopped') {
        await this.restartProcess(process.id);
      }
    });
  }

  async restartProcess(id: string): Promise<Process> {
    const process = await this.processRepository.findOne({
      where: {
        id
      }
    });
    if (!process) {
      throw new NotFoundException(`Process with id ${id} not found`);
    }

    await this.stopProcess(id);
    
    const childProcess = spawn(process.command.split(' ')[0], process.command.split(' ').slice(1), {
      stdio: ['ignore', 'pipe', 'pipe'],
      detached: true,
    });

    process.process = childProcess;
    process.pid = childProcess.pid;
    process.status = 'running';
    process.restartAttempts++;
    process.lastRestart = new Date();

    this.setupProcessEventListeners(process);
    await this.processRepository.save(process);

    this.logger.log(`Process ${process.name} (${process.id}) restarted successfully.`);
    return process;
  }
}

</FILE>
<FILE path="/home/travis/Projects/process-manager/src/entities/process.entity.ts">
import { Entity, Column, PrimaryGeneratedColumn, CreateDateColumn, UpdateDateColumn } from 'typeorm';
import { ChildProcess } from 'child_process';

@Entity()
export class Process {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @Column()
  name: string;

  @Column()
  command: string;

  @Column({
    type: 'varchar',
    length: 10,
    default: 'stopped'
  })
  status: 'running' | 'stopped' | 'crashed';

  @Column({ nullable: true })
  pid?: number;

  @Column({ default: 0 })
  restartAttempts: number;

  @Column({ type: 'datetime', nullable: true })
  lastRestart?: Date;

  @Column({ type: 'float', default: 0 })
  cpu: number;

  @Column({ type: 'float', default: 0 })
  memory: number;

  @Column({ type: 'float', default: 1024 })
  maxMemory: number;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;

  // This property won't be stored in the database
  private _process?: ChildProcess;

  // Getter for the process
  get process(): ChildProcess | undefined {
    return this._process;
  }

  // Setter for the process
  set process(proc: ChildProcess | undefined) {
    this._process = proc;
    if (proc) {
      this.pid = proc.pid;
      this.status = 'running';
    } else {
      this.pid = undefined;
      this.status = 'stopped';
    }
  }

  // Method to start the process
  startProcess(spawn: Function): void {
    if (this.status !== 'running') {
      const childProcess = spawn(this.command.split(' ')[0], this.command.split(' ').slice(1), {
        stdio: ['ignore', 'pipe', 'pipe'],
        detached: true,
      });
      this.process = childProcess;
    }
  }

  // Method to stop the process
  stopProcess(): void {
    if (this.status === 'running' && this._process) {
      this._process.kill();
      this._process = undefined;
      this.status = 'stopped';
      this.pid = undefined;
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/process-manager/src/interfaces/process.interface.ts">
import { ChildProcess, spawn } from 'child_process';

export interface Process {
  id?: string;
  name: string;
  command: string;
  status: 'running' | 'stopped' | 'crashed';
  pid?: number;
  process?: ChildProcess;
  restartAttempts: number;
  lastRestart?: Date;
  cpu: number;
  memory: number;
}

</FILE>
<FILE path="/home/travis/Projects/process-manager/src/logger/custom-logger.ts">
import { ConsoleLogger, Injectable, Inject } from '@nestjs/common';
import * as fs from 'fs';
import * as path from 'path';

@Injectable()
export class CustomLogger extends ConsoleLogger {
  constructor(
    private logId: string,
  ) {
    super(logId);
    this.setLogLevels(['log', 'error', 'warn', 'debug', 'verbose']);
  }

  log(message: string, context?: string) {
    this.printMessage(message, 'log', context);
    // this.emitLogEvent('log', message);
  }

  warn(message: string, context?: string) {
    this.printMessage(message, 'warn', context);
    // this.emitLogEvent('warn', message);
  }

  error(message: string, trace?: string, context?: string) {
    this.printMessage(message, 'error', context);
    // this.emitLogEvent('error', message);
    if (trace) {
      this.printMessage(trace, 'error', context);
    }
  }

  debug(message: string, context?: string) {
    this.printMessage(message, 'debug', context);
  }

  verbose(message: string, context?: string) {
    this.printMessage(message, 'verbose', context);
  }

  private printMessage(message: string, logLevel: string, context?: string) {
    const output = context ? `[${context}] ${message}` : message;
    console.log(`[${this.getNow()}] [${logLevel.toUpperCase()}] [${this.logId}] ${output}`);
  }

  private getNow(): string {
    return new Date().toISOString();
  }

  static write_to_file(message: string) {
    const logFile = path.join(process.cwd(), 'start:dev.stdout.txt');
    fs.appendFile(logFile, message, (err) => {
      if (err) {
        console.error('Failed to write to log file:', err);
      }
    });
  }

  static clearSTDOUT() {
    const logFile = path.join(process.cwd(), 'start:dev.stdout.txt');
    try {
      fs.writeFileSync(logFile, '');
      console.log(`Log file cleared at ${logFile}`);
    } catch (error) {
      console.error('Failed to clear log file:', error);
    }
  }
}
</FILE>
<FILE path="/home/travis/Projects/process-manager/src/app.module.ts">
import { Module } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { TypeOrmModule } from '@nestjs/typeorm';
import { ProcessController } from './controllers/process.controller';
import { ProcessManagerService } from './services/process-manager.service';
import { Process } from './entities/process.entity';
import { ScalingRule } from './entities/scaling-rule.entity';
import { CustomLogger } from './logger/custom-logger';

@Module({
  imports: [
    ConfigModule.forRoot(),
    TypeOrmModule.forRootAsync({
      imports: [ConfigModule],
      useFactory: (configService: ConfigService) => ({
        type: 'sqlite',
        database: configService.get('DB_NAME', 'process_manager.sqlite'),
        entities: [Process, ScalingRule],
        synchronize: true, // Be cautious with this in production
      }),
      inject: [ConfigService],
    }),
    TypeOrmModule.forFeature([Process, ScalingRule]),
  ],
  controllers: [ProcessController],
  providers: [
    ProcessManagerService,
    CustomLogger
  ]
})
export class AppModule {}
</FILE>
<FILE path="/home/travis/Projects/process-manager/src/main.ts">
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { NestExpressApplication } from '@nestjs/platform-express';

import { CustomLogger } from './logger/custom-logger';

export async function bootstrap(): Promise<any> {
  const logger = new CustomLogger('Bootstrap');
  const app = await NestFactory.create<NestExpressApplication>(AppModule, { logger });
  
  await app.listen(9393);
}
bootstrap();

</FILE>
<FILE path="/home/travis/Projects/process-manager/start:dev.stdout.txt">
c[[90m3:07:38 PM[0m] Starting compilation in watch mode...

[[90m3:07:39 PM[0m] Found 0 errors. Watching for file changes.

[2024-09-06T20:07:40.000Z] [LOG] [Bootstrap] [NestFactory] Starting Nest application...
[2024-09-06T20:07:40.007Z] [LOG] [Bootstrap] [InstanceLoader] TypeOrmModule dependencies initialized
[2024-09-06T20:07:40.007Z] [LOG] [Bootstrap] [InstanceLoader] ConfigHostModule dependencies initialized
[2024-09-06T20:07:40.007Z] [LOG] [Bootstrap] [InstanceLoader] ConfigModule dependencies initialized
[2024-09-06T20:07:40.007Z] [LOG] [Bootstrap] [InstanceLoader] ConfigModule dependencies initialized
[2024-09-06T20:07:40.020Z] [LOG] [Bootstrap] [InstanceLoader] TypeOrmCoreModule dependencies initialized
[2024-09-06T20:07:40.020Z] [LOG] [Bootstrap] [InstanceLoader] TypeOrmModule dependencies initialized
[2024-09-06T20:07:40.020Z] [LOG] [Bootstrap] [InstanceLoader] AppModule dependencies initialized
[2024-09-06T20:07:40.023Z] [LOG] [Bootstrap] [RoutesResolver] ProcessController {/processes}:
[2024-09-06T20:07:40.024Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/processes, GET} route
[2024-09-06T20:07:40.025Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/processes, POST} route
[2024-09-06T20:07:40.025Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/processes/:id/stop, POST} route
[2024-09-06T20:07:40.025Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/processes/:id, GET} route
[2024-09-06T20:07:40.025Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/processes/scaling-rule, POST} route
[2024-09-06T20:07:40.025Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/processes/scaling-rules, GET} route
[2024-09-06T20:07:40.030Z] [LOG] [Bootstrap] [NestApplication] Nest application successfully started
[2024-09-06T20:46:02.402Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:46:12.394Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:46:22.397Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:46:32.408Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:46:42.409Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:46:52.415Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:47:02.421Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:47:12.423Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:47:22.431Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:47:32.441Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:47:42.441Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:47:52.448Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:48:02.458Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:48:12.459Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:48:22.468Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:48:32.478Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:48:42.479Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:48:52.489Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:49:02.493Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:49:12.494Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:49:22.503Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:49:32.511Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:49:42.511Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:49:52.520Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:50:02.530Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:50:12.531Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:50:22.540Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:50:32.544Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:50:42.544Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:50:52.551Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:51:02.560Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:51:12.561Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:51:22.568Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:51:32.578Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:51:42.579Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:51:52.590Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:52:02.600Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:52:12.602Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:52:22.608Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:52:32.618Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:52:42.618Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:52:52.627Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:53:02.630Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:53:12.630Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:53:22.640Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:53:32.647Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:53:42.648Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:53:52.656Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:54:02.667Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:54:12.668Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:54:22.677Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:54:32.688Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:54:42.688Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:54:52.699Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:55:02.709Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:55:12.710Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:55:22.720Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:55:32.729Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:55:42.731Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:55:52.737Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:56:02.748Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:56:12.749Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:56:22.758Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:56:32.765Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:56:42.765Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:56:52.776Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:57:02.784Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:57:12.785Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:57:22.795Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:57:32.804Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:57:42.804Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:57:52.815Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:58:02.824Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:58:12.824Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:58:22.834Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:58:32.844Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:58:42.844Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:58:52.854Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:59:02.862Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:59:12.864Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:59:22.873Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:59:32.884Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:59:42.886Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T20:59:52.889Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:00:02.898Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:00:12.897Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:00:22.898Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:00:22.898Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:00:32.905Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:00:32.906Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:00:42.907Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:00:42.907Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:00:52.916Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:00:52.917Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:01:02.927Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:01:02.928Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:01:12.928Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:01:12.928Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:01:22.938Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:01:22.939Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:01:32.942Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:01:32.943Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:01:42.942Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:01:42.943Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:01:52.944Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:01:52.945Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:02:02.947Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:02:02.948Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:02:12.948Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:02:12.949Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:02:22.957Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:02:22.958Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:02:32.961Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:02:32.961Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:02:42.960Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:02:42.961Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:02:52.971Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:02:52.971Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:03:02.975Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:03:02.976Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:03:12.976Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:03:12.977Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:03:22.987Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:03:22.987Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:03:32.993Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:03:32.993Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:03:42.993Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:03:42.993Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:03:53.004Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:03:53.004Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:04:03.006Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:04:03.006Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:04:13.007Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:04:13.008Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:04:23.017Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:04:23.017Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:04:33.027Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:04:33.027Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:04:43.029Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:04:43.029Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:04:53.037Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:04:53.038Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:05:03.047Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:05:03.048Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:05:13.048Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:05:13.049Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:05:23.052Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
c[[90m4:09:42 PM[0m] File change detected. Starting incremental compilation...

[96msrc/controllers/process.controller.ts[0m:[93m11[0m:[93m39[0m - [91merror[0m[90m TS2339: [0mProperty 'getProcesses' does not exist on type 'ProcessManagerService'.

[7m11[0m     return this.processManagerService.getProcesses();
[7m  [0m [91m                                      ~~~~~~~~~~~~[0m

[96msrc/controllers/process.controller.ts[0m:[93m16[0m:[93m39[0m - [91merror[0m[90m TS2551: [0mProperty 'startProcess' does not exist on type 'ProcessManagerService'. Did you mean 'restartProcess'?

[7m16[0m     return this.processManagerService.startProcess(data);
[7m  [0m [91m                                      ~~~~~~~~~~~~[0m

  [96msrc/services/process-manager.service.ts[0m:[93m27[0m:[93m9[0m
    [7m27[0m   async restartProcess(id: string): Promise<Process> {
    [7m  [0m [96m        ~~~~~~~~~~~~~~[0m
    'restartProcess' is declared here.

[96msrc/controllers/process.controller.ts[0m:[93m22[0m:[93m61[0m - [91merror[0m[90m TS2339: [0mProperty 'stopProcess' does not exist on type 'ProcessManagerService'.

[7m22[0m     const stoppedProcess = await this.processManagerService.stopProcess(id);
[7m  [0m [91m                                                            ~~~~~~~~~~~[0m

[96msrc/controllers/process.controller.ts[0m:[93m31[0m:[93m39[0m - [91merror[0m[90m TS2339: [0mProperty 'getProcessInfo' does not exist on type 'ProcessManagerService'.

[7m31[0m     return this.processManagerService.getProcessInfo(id);
[7m  [0m [91m                                      ~~~~~~~~~~~~~~[0m

[96msrc/controllers/process.controller.ts[0m:[93m36[0m:[93m39[0m - [91merror[0m[90m TS2339: [0mProperty 'addScalingRule' does not exist on type 'ProcessManagerService'.

[7m36[0m     return this.processManagerService.addScalingRule(rule);
[7m  [0m [91m                                      ~~~~~~~~~~~~~~[0m

[96msrc/controllers/process.controller.ts[0m:[93m41[0m:[93m39[0m - [91merror[0m[90m TS2339: [0mProperty 'getScalingRules' does not exist on type 'ProcessManagerService'.

[7m41[0m     return this.processManagerService.getScalingRules();
[7m  [0m [91m                                      ~~~~~~~~~~~~~~~[0m

[96msrc/services/process-manager.service.ts[0m:[93m14[0m:[93m14[0m - [91merror[0m[90m TS2420: [0mClass 'ProcessManagerService' incorrectly implements interface 'OnModuleInit'.
  Property 'onModuleInit' is missing in type 'ProcessManagerService' but required in type 'OnModuleInit'.

[7m14[0m export class ProcessManagerService implements OnModuleInit {
[7m  [0m [91m             ~~~~~~~~~~~~~~~~~~~~~[0m

  [96mnode_modules/@nestjs/common/interfaces/hooks/on-init.interface.d.ts[0m:[93m9[0m:[93m5[0m
    [7m9[0m     onModuleInit(): any;
    [7m [0m [96m    ~~~~~~~~~~~~~~~~~~~~[0m
    'onModuleInit' is declared here.

[96msrc/services/process-manager.service.ts[0m:[93m37[0m:[93m16[0m - [91merror[0m[90m TS2339: [0mProperty 'stopProcess' does not exist on type 'ProcessManagerService'.

[7m37[0m     await this.stopProcess(id);
[7m  [0m [91m               ~~~~~~~~~~~[0m

[96msrc/services/process-manager.service.ts[0m:[93m50[0m:[93m10[0m - [91merror[0m[90m TS2339: [0mProperty 'setupProcessEventListeners' does not exist on type 'ProcessManagerService'.

[7m50[0m     this.setupProcessEventListeners(process);
[7m  [0m [91m         ~~~~~~~~~~~~~~~~~~~~~~~~~~[0m

[[90m4:09:42 PM[0m] Found 9 errors. Watching for file changes.

c[[90m4:11:14 PM[0m] File change detected. Starting incremental compilation...

[96msrc/controllers/process.controller.ts[0m:[93m47[0m:[93m63[0m - [91merror[0m[90m TS2341: [0mProperty 'restartProcess' is private and only accessible within class 'ProcessManagerService'.

[7m47[0m     const restartedProcess = await this.processManagerService.restartProcess(id);
[7m  [0m [91m                                                              ~~~~~~~~~~~~~~[0m

[96msrc/controllers/process.controller.ts[0m:[93m47[0m:[93m78[0m - [91merror[0m[90m TS2345: [0mArgument of type 'string' is not assignable to parameter of type 'Process'.

[7m47[0m     const restartedProcess = await this.processManagerService.restartProcess(id);
[7m  [0m [91m                                                                             ~~[0m

[96msrc/controllers/process.controller.ts[0m:[93m48[0m:[93m26[0m - [91merror[0m[90m TS2339: [0mProperty 'status' does not exist on type 'void'.

[7m48[0m     if (restartedProcess.status !== 'running') {
[7m  [0m [91m                         ~~~~~~[0m

[96msrc/services/process-manager.service.ts[0m:[93m159[0m:[93m17[0m - [91merror[0m[90m TS2393: [0mDuplicate function implementation.

[7m159[0m   private async restartProcess(process: ProcessInterface) {
[7m   [0m [91m                ~~~~~~~~~~~~~~[0m

[96msrc/services/process-manager.service.ts[0m:[93m195[0m:[93m9[0m - [91merror[0m[90m TS2393: [0mDuplicate function implementation.

[7m195[0m   async restartProcess(id: string): Promise<Process> {
[7m   [0m [91m        ~~~~~~~~~~~~~~[0m

[[90m4:11:14 PM[0m] Found 5 errors. Watching for file changes.

c[[90m4:11:31 PM[0m] File change detected. Starting incremental compilation...

[96msrc/services/process-manager.service.ts[0m:[93m154[0m:[93m35[0m - [91merror[0m[90m TS2345: [0mArgument of type 'Process' is not assignable to parameter of type 'string'.

[7m154[0m         await this.restartProcess(process);
[7m   [0m [91m                                  ~~~~~~~[0m

[[90m4:11:31 PM[0m] Found 1 error. Watching for file changes.

c[[90m4:12:08 PM[0m] File change detected. Starting incremental compilation...

[[90m4:12:08 PM[0m] Found 0 errors. Watching for file changes.

[2024-09-06T21:12:08.532Z] [LOG] [Bootstrap] [NestFactory] Starting Nest application...
[2024-09-06T21:12:08.542Z] [LOG] [Bootstrap] [InstanceLoader] TypeOrmModule dependencies initialized
[2024-09-06T21:12:08.542Z] [LOG] [Bootstrap] [InstanceLoader] ConfigHostModule dependencies initialized
[2024-09-06T21:12:08.542Z] [LOG] [Bootstrap] [InstanceLoader] ConfigModule dependencies initialized
[2024-09-06T21:12:08.542Z] [LOG] [Bootstrap] [InstanceLoader] ConfigModule dependencies initialized
[2024-09-06T21:12:08.560Z] [LOG] [Bootstrap] [InstanceLoader] TypeOrmCoreModule dependencies initialized
[2024-09-06T21:12:08.560Z] [LOG] [Bootstrap] [InstanceLoader] TypeOrmModule dependencies initialized
[2024-09-06T21:12:08.560Z] [LOG] [Bootstrap] [InstanceLoader] AppModule dependencies initialized
[2024-09-06T21:12:08.564Z] [LOG] [Bootstrap] [RoutesResolver] ProcessController {/processes}:
[2024-09-06T21:12:08.565Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/processes, GET} route
[2024-09-06T21:12:08.565Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/processes, POST} route
[2024-09-06T21:12:08.566Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/processes/:id/stop, POST} route
[2024-09-06T21:12:08.566Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/processes/:id, GET} route
[2024-09-06T21:12:08.566Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/processes/scaling-rule, POST} route
[2024-09-06T21:12:08.566Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/processes/scaling-rules, GET} route
[2024-09-06T21:12:08.566Z] [LOG] [Bootstrap] [RouterExplorer] Mapped {/processes/:id/restart, POST} route
[2024-09-06T21:12:08.572Z] [LOG] [Bootstrap] [NestApplication] Nest application successfully started
[2024-09-06T21:15:38.694Z] [ERROR] [Bootstrap] [ProcessManagerService] Failed to update metrics for process hello-world: No matching pid found
[2024-09-06T21:15:42.138Z] [LOG] [Bootstrap] [ProcessManagerService] Process hello-world (9b7fcd22-6ca6-4218-afa1-079fc75c039a) restarted successfully.
[2024-09-06T21:15:42.155Z] [LOG] [Bootstrap] [ProcessManagerService] Process hello-world (9b7fcd22-6ca6-4218-afa1-079fc75c039a) exited with code 1

</FILE>
<FILE path="/home/travis/Projects/process-manager/test:restart-process.stdout.txt">
Starting ProcessController (e2e) restart process test
Testing: should be able to restart a running process over api
Attempting to restart process with id: 9b7fcd22-6ca6-4218-afa1-079fc75c039a
Restart process response: {
  id: '9b7fcd22-6ca6-4218-afa1-079fc75c039a',
  name: 'hello-world',
  command: 'node -e "\n' +
    "    console.log('Hello, World!');\n" +
    '    setInterval(() => {\n' +
    "      console.log('Still running...');\n" +
    '    }, 1000);\n' +
    '  "',
  status: 'running',
  pid: 1175962,
  restartAttempts: 1,
  lastRestart: '2024-09-06T21:15:42.133Z',
  cpu: 0,
  memory: 0,
  maxMemory: 1024,
  createdAt: '2024-09-06T21:15:36.000Z',
  updatedAt: '2024-09-06T21:15:36.000Z',
  _process: {
    _events: {},
    _eventsCount: 1,
    _closesNeeded: 3,
    _closesGot: 0,
    connected: false,
    signalCode: null,
    exitCode: null,
    killed: false,
    spawnfile: 'node',
    _handle: { pid: 1175962 },
    spawnargs: [
      'node',                '-e',
      '"\n',                 '',
      '',                    '',
      "console.log('Hello,", "World!');\n",
      '',                    '',
      '',                    'setInterval(()',
      '=>',                  '{\n',
      '',                    '',
      '',                    '',
      '',                    "console.log('Still",
      "running...');\n",     '',
      '',                    '',
      '},',                  '1000);\n',
      '',                    '"'
    ],
    pid: 1175962,
    stdin: null,
    stdout: {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: {},
      _readableState: [Object],
      _writableState: [Object],
      allowHalfOpen: false,
      _eventsCount: 2,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null
    },
    stderr: {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: {},
      _readableState: [Object],
      _writableState: [Object],
      allowHalfOpen: false,
      _eventsCount: 2,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null
    },
    stdio: [ null, [Object], [Object] ]
  }
}
Waiting for 2 seconds to ensure the process has restarted
Verifying that the process is running
Test failed: Expected process status to be 'running', got 'stopped'

</FILE>
<FILE path="/home/travis/Projects/process-manager/dist/controllers/process.controller.d.ts">
import { ProcessManagerService } from '../services/process-manager.service';
import { ScalingRule } from '../interfaces/scaling-rule.interface';
export declare class ProcessController {
    private processManagerService;
    constructor(processManagerService: ProcessManagerService);
    listProcesses(): Promise<import("../entities/process.entity").Process[]>;
    startProcess(data: {
        name: string;
        command: string;
    }): Promise<import("../entities/process.entity").Process>;
    stopProcess(id: string): Promise<import("../entities/process.entity").Process>;
    getProcessInfo(id: string): Promise<import("../entities/process.entity").Process>;
    addScalingRule(rule: ScalingRule): Promise<import("../entities/scaling-rule.entity").ScalingRule>;
    getScalingRules(): Promise<import("../entities/scaling-rule.entity").ScalingRule[]>;
    restartProcess(id: string): Promise<import("../entities/process.entity").Process>;
}

</FILE>
<FILE path="/home/travis/Projects/process-manager/dist/services/process-manager.service.d.ts">
import { OnModuleInit } from '@nestjs/common';
import { Repository } from 'typeorm';
import { Process } from '../entities/process.entity';
import { ScalingRule } from '../entities/scaling-rule.entity';
import { ConfigService } from '@nestjs/config';
import { ScalingRule as ScalingRuleInterface } from '../interfaces/scaling-rule.interface';
export declare class ProcessManagerService implements OnModuleInit {
    private processRepository;
    private scalingRuleRepository;
    private configService;
    private readonly logger;
    constructor(processRepository: Repository<Process>, scalingRuleRepository: Repository<ScalingRule>, configService: ConfigService);
    onModuleInit(): Promise<void>;
    private loadPersistedProcesses;
    private monitorAndScale;
    private updateProcessMetrics;
    private applyScalingRules;
    private balanceLoad;
    getProcesses(): Promise<Process[]>;
    startProcess(data: {
        name: string;
        command: string;
    }): Promise<Process>;
    stopProcess(id: string): Promise<Process>;
    getProcessInfo(id: string): Promise<Process>;
    addScalingRule(rule: ScalingRuleInterface): Promise<ScalingRule>;
    getScalingRules(): Promise<ScalingRule[]>;
    private setupProcessEventListeners;
    restartProcess(id: string): Promise<Process>;
}

</FILE>
<FILE path="/home/travis/Projects/process-manager/dist/entities/process.entity.d.ts">
import { ChildProcess } from 'child_process';
export declare class Process {
    id: string;
    name: string;
    command: string;
    status: 'running' | 'stopped' | 'crashed';
    pid?: number;
    restartAttempts: number;
    lastRestart?: Date;
    cpu: number;
    memory: number;
    maxMemory: number;
    createdAt: Date;
    updatedAt: Date;
    private _process?;
    get process(): ChildProcess | undefined;
    set process(proc: ChildProcess | undefined);
    startProcess(spawn: Function): void;
    stopProcess(): void;
}

</FILE>
<FILE path="/home/travis/Projects/process-manager/dist/interfaces/process.interface.d.ts">
import { ChildProcess } from 'child_process';
export interface Process {
    id?: string;
    name: string;
    command: string;
    status: 'running' | 'stopped' | 'crashed';
    pid?: number;
    process?: ChildProcess;
    restartAttempts: number;
    lastRestart?: Date;
    cpu: number;
    memory: number;
}

</FILE>
<FILE path="/home/travis/Projects/process-manager/dist/logger/custom-logger.d.ts">
import { ConsoleLogger } from '@nestjs/common';
export declare class CustomLogger extends ConsoleLogger {
    private logId;
    constructor(logId: string);
    log(message: string, context?: string): void;
    warn(message: string, context?: string): void;
    error(message: string, trace?: string, context?: string): void;
    debug(message: string, context?: string): void;
    verbose(message: string, context?: string): void;
    private printMessage;
    private getNow;
    static write_to_file(message: string): void;
    static clearSTDOUT(): void;
}

</FILE>
<FILE path="test/restart-process.test.ts" TARGET>
import * as request from 'supertest';

const API_URL = 'http://localhost:9393';

async function runTests() {
  console.log('Starting ProcessController (e2e) restart process test');

  console.log('Testing: should be able to restart a running process over api');

  try {
    // First, get all running processes
    const listResponse = await request(API_URL).get('/processes');
    
    if (listResponse.status !== 200) {
      throw new Error(`Expected status 200, got ${listResponse.status}`);
    }

    const runningProcesses = listResponse.body.filter(process => process.status === 'running');

    if (runningProcesses.length === 0) {
      throw new Error('No running processes found to restart');
    }

    const processToRestart = runningProcesses[0];

    console.log(`Attempting to restart process with id: ${processToRestart.id}`);

    const restartResponse = await request(API_URL)
      .post(`/processes/${processToRestart.id}/restart`);

    if (restartResponse.status !== 200) {
      throw new Error(`Expected status 200, got ${restartResponse.status}`);
    }

    console.log('Restart process response:', restartResponse.body);

    if (restartResponse.body.status !== 'running') {
      throw new Error(`Expected status to be 'running', got '${restartResponse.body.status}'`);
    }

    console.log('Waiting for 2 seconds to ensure the process has restarted');
    await new Promise(resolve => setTimeout(resolve, 2000));

    console.log('Verifying that the process is running');
    const processInfoResponse = await request(API_URL).get(`/processes/${processToRestart.id}`);
    
    if (processInfoResponse.status !== 200) {
      throw new Error(`Expected status 200, got ${processInfoResponse.status}`);
    }

    const processInfo = processInfoResponse.body;
    
    if (processInfo.status !== 'running') {
      throw new Error(`Expected process status to be 'running', got '${processInfo.status}'`);
    }

    if (processInfo.restartAttempts <= processToRestart.restartAttempts) {
      throw new Error(`Expected restart attempts to increase, but it didn't`);
    }

    console.log('Test passed successfully');
  } catch (error) {
    console.error('Test failed:', error.message);
    process.exit(1);
  }
}

runTests().catch(error => {
  console.error('An unexpected error occurred:', error);
  process.exit(1);
});
</FILE>
<REQUEST>
the test failed because in start dev stdout process exited with code 1
</REQUEST>